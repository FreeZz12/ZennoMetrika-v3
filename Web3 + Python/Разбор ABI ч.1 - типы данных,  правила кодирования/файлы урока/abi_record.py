from eth_abi import encode
from web3 import Web3

from chains import Chains

def slice_data(data: str) -> None:
    """
    Нарезает строку на части по 64 символа и выводит их в виде таблицы.
    :param data: input data вызова функции контракта
    """
    if data.startswith('0x'):
        data = data[2:]

    if len(data) % 64 != 0:
        if not data.startswith('0' * 8):
            # удаляем селектор функции
            data = data[8:]

    for i in range(0, len(data), 64):
        line = data[i:i + 64]
        number = int(line, 16)
        number = number if number < 100e18 else 0
        offset = 'смещение/длина' if (not number % 32) and (0 < number < 3000) else ''
        if number == 0:
            number = ''
        print(f"{int(i / 2):<{5}}{line} {number} {offset}")


def main():
    # abi - application binary interface
    # api - application programming interface
    w3 = Web3(Web3.HTTPProvider(Chains.Ethereum.rpc))
    # если тип данных такой-то, упаковываем эти данные вот так-то
    # данные упакованы кратно 32 байтам (64 символа)
    # все данные в hex формате bool True = 1, False = 0

    # данные с фиксированной длиной

    # uint<N> - беззнаковое целое число от 0 до 2^N-1
    # uint8 - 1 байт (2 символа) от 0 до 255
    # uint16 - 2 байта (4 символа) от 0 до 65535
    # uint24 - 3 байта (6 символов) от 0 до 16777215
    # uint32 - 4 байта (8 символов) от 0 до 4294967295
    # uint64 - 8 байт (16 символов) от 0 до 18446744073709551615
    # uint128 - 16 байт (32 символа) от 0 до 340282366841710244096245096603262677376
    # uint256 - 32 байта (64 символа) от 0 до 115792089237316195423570985008687907853269984665640564039457584007913129639936

    # int<N> - знаковое целое число от -2^(N-1) до 2^(N-1)-1
    # int8 - 1 байт (2 символа) от -128 до 127
    # int16 - 2 байта (4 символа) от -32768 до 32767
    # int24 - 3 байта (6 символов) от -8388608 до 8388607
    # int32 - 4 байта (8 символов) от -2147483648 до 2147483647
    # int64 - 8 байт (16 символов) от -9223372036854775808 до 9223372036854775807
    # int128 - 16 байт (32 символа) от -170141183460469231731687303715884105728 до 170141183460469231731687303715884105727
    # int256 - 32 байта (64 символа) от -1152921504606846976 до 1152921504606846975

    # bool - 1 байт (2 символа) True = 1, False = 0
    # address - 20 байт (40 символов) адрес в hex формате (uint160)

    # bytes<N> - массив байт длиной N байт
    # bytes1 - 1 байт (2 символа)
    # ...
    # bytes32 - 32 байта (64 символа) - заполняется нулями до 32 байт справа
    # example: bytes3 - 6162630000000000000000000000000000000000000000000000000000000000

    # <type> - тип данных
    # <type>[N] - массив типа <type> длиной N элементов
    # например: uint256[2] - массив из 2 элементов типа uint256 [5451, 1234]
    # или address[2] - массив из 2 элементов типа address [0x1234567890123456789012345678901234567890, 0x0987654321098765432109876543210987654321]

    # пример фиксированных данных
    # data = '0x
    # 0x095ea7b3 - селектор функции approve
    # 0000000000000000000000001234567890123456789012345678901234567890 - type(address) - адрес spender 32 байта
    # 00000000000000000000000000000000000000000000000000000000000261f6 - type(uint256) - amount 1000000000000000000 - 32 байта


    # данные с нефиксированной длиной
    # address[] - массив адресов c нефиксированной длиной
    # uint256[] - массив uint256 c нефиксированной длиной

    # someFunction(address[] addresses, uint256 amount, uint256[] amounts)

    # голова
    # 000       0000000000000000000000000000000000000000000000000000000000000060 - offset смещение addresses
    # 032       00000000000000000000000000000000000000000000000000000000000261f6 - type(uint256) amount
    # 064       00000000000000000000000000000000000000000000000000000000000000e0 - offset смещение amounts

    # хвост
    # 096       0000000000000000000000000000000000000000000000000000000000000003 - type(uint256) - количество адресов в массиве
    # 128       0000000000000000000000001234567890123456789012345678901234567890 - type(address) - адрес 1
    # 160       0000000000000000000000001234567890123456789012345678901234567890 - type(address) - адрес 2
    # 192       0000000000000000000000001234567890123456789012345678901234567890 - type(address) - адрес 3

    # 224       0000000000000000000000000000000000000000000000000000000000000004 - type(uint256) - количество элементов в массиве
    # 256       00000000000000000000000000000000000000000000000000000000000261f6 - type(uint256) - amount 1
    # 288       00000000000000000000000000000000000000000000000000000000000261f6 - type(uint256) - amount 2
    # 320       00000000000000000000000000000000000000000000000000000000000261f6 - type(uint256) - amount 3
    # 352       00000000000000000000000000000000000000000000000000000000000261f6 - type(uint256) - amount 4

    # bytes - массив байт переменной длины (последняя строка заполняется нулями до 32 байт справа)

    # someFunction(bytes path, uint256 amount)

    # голова
    # 000       0000000000000000000000000000000000000000000000000000000000000040 - offset смещение path
    # 032       00000000000000000000000000000000000000000000000000000000000261f6 - type(uint256) amount

    # хвост
    # 064       000000000000000000000000000000000000000000000000000000000000004b
    # 096       1234567890123456789012345678901234567890123456789012345678901233 - type(uint256) - количество адресов в массиве
    # 128       7890123456778901234567890123456789012345678901234567890123456789 - type(address) - адрес 1
    # 160       7890123456701234567894000000000000000000000000000000000000000000 - type(address) - адрес 2

    # string - строка переменной длины (последняя строка заполняется нулями до 32 байт справа)
    # правила такие же как и для bytes

    # bytes[5]
    # bytes[]

    # someFunction(string[] numbers, uint256 amount)
    # someFunction(['one', 'two', 'three'], 1000)

    # голова
    # 000       0000000000000000000000000000000000000000000000000000000000000040 - offset смещение numbers
    # 032       00000000000000000000000000000000000000000000000000000000000003e8 - type(uint256) amount

    # хвост
    # 064       0000000000000000000000000000000000000000000000000000000000000003 - длина массива
    # 096       0000000000000000000000000000000000000000000000000000000000000060 - offset смещение первого элемента
    # 128       00000000000000000000000000000000000000000000000000000000000000a0 - offset смещение второго элемента
    # 160       00000000000000000000000000000000000000000000000000000000000000e0 - offset смещение третьего элемента

    # хвост в хвосте
    # 192       0000000000000000000000000000000000000000000000000000000000000003 - длина слова one
    # 224       6f6e650000000000000000000000000000000000000000000000000000000000 - слово one
    # 256       0000000000000000000000000000000000000000000000000000000000000003 - длина слова two
    # 288       74776f0000000000000000000000000000000000000000000000000000000000 - слово two
    # 320       0000000000000000000000000000000000000000000000000000000000000005 - длина слова three
    # 352       7468726565000000000000000000000000000000000000000000000000000000 - слово three


    encoded = encode(['string[]', 'uint256'], [['one', 'two', 'three'], 1000])
    print(encoded.hex())

    """
    0    0000000000000000000000000000000000000000000000000000000000000040 64 смещение/длина
    32   00000000000000000000000000000000000000000000000000000000000003e8 1000 

    64   0000000000000000000000000000000000000000000000000000000000000003 3 
    96   0000000000000000000000000000000000000000000000000000000000000060 96 смещение/длина
    128  00000000000000000000000000000000000000000000000000000000000000a0 160 смещение/длина
    160  00000000000000000000000000000000000000000000000000000000000000e0 224 смещение/длина


    192  0000000000000000000000000000000000000000000000000000000000000003 3 
    224  6f6e650000000000000000000000000000000000000000000000000000000000  
    256  0000000000000000000000000000000000000000000000000000000000000003 3 
    288  74776f0000000000000000000000000000000000000000000000000000000000  
    320  0000000000000000000000000000000000000000000000000000000000000005 5 
    352  7468726565000000000000000000000000000000000000000000000000000000  

    """





















    # данные переменной длины











if __name__ == '__main__':
    main()
