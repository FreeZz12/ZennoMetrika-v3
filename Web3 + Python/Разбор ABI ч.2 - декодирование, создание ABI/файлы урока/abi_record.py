# -*- coding: utf-8 -*-
import time
from pprint import pprint

from eth_abi import encode, decode
from web3 import Web3

from chains import Chains


def slice_data(data: str) -> None:
    """
    Нарезает строку на части по 64 символа и выводит их в виде таблицы.
    :param data: input data вызова функции контракта
    """
    if data.startswith('0x'):
        data = data[2:]

    if len(data) % 64 != 0:
        if not data.startswith('0' * 8):
            # удаляем селектор функции
            data = data[8:]

    for i in range(0, len(data), 64):
        byte_offset = int(i/2)
        byte_offset_hex = hex(byte_offset)[2:]
        line = data[i:i + 64]
        number = int(line, 16)
        number = number if number < 100e18 else 0
        offset = 'offset' if (not number % 32) and (0 < number < 3000) else ''
        if number == 0:
            number = ''
        print(f"{byte_offset_hex:<{4}}{byte_offset:<{4}}{line} {number} {offset}")

def decode_abi_1():
    abi = [
        {
            'name': 'someFunction',
            'type': 'function', 
            'stateMutability': 'payable',
            'inputs': [
                {
                    'name': 'amount',
                    'type': 'uint256',
                },
                {
                    'name': 'tokens',
                    'type': 'address[]',
                },
                {
                    'name': 'sender',
                    'type': 'address',
                },
                {
                    'name': 'deadline',
                    'type': 'uint256',
                },
                {
                    'name': 'factory',
                    'type': 'address',
                }
            ],
            'outputs': []
        
        }]
    
    signature = 'someFunction(uint256,address[],address,uint256,address)'
    hash_signature = Web3.keccak(text=signature).hex()
    print(hash_signature[:8])
    
    w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/'))
    contract_address = w3.to_checksum_address('0x80a64c6D7f12C47B7c66c5B4E20E72bc1FCd5d9e')
    contract = w3.eth.contract(address=contract_address, abi=abi)
    input_data = "0xe4e031490000000000000000000000000000000000000000000000000007ebb4339850c900000000000000000000000000000000000000000000000000000000000000a00000000000000000000000002a449ceba5218b544f7b3674711f72a2f33fdf670000000000000000000000000000000000000000000000000000000067ebb8540000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000013d545d47305beddf013fa173aae735acd61dae8"
    decoded_data = contract.decode_function_input(input_data)
    print(decoded_data)
    
    
    contract.functions.someFunction(
        amount=0,
        tokens=['0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', '0x0AD5a92a5d79a903b23823431cDB07650a5E4A44'],
        sender='0xC8A4E81Ed6E237A5f055e5e919F92fd78989f692',
        deadline=int(time.time()+30*60),
        factory='0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'
    ).build_transaction({})
    
        
    """
    (<Function someFunction(uitn,address[],address,uint256,address)>,
    {'someBool': False,
    'tokens': ['0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', '0x0AD5a92a5d79a903b23823431cDB07650a5E4A44'],
    'sender': '0x8BdCDCca87b739f5Ca9D0E42A7f0ac55E2a80fF9',
    'deadline': 1743498408,
    'factory': '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'
    })

    """



    # data = """
    # 0xc442a97f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008bdcdcca87b739f5ca9d0e42a7f0ac55e2a80ff90000000000000000000000000000000000000000000000000000000067ebaca80000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000ad5a92a5d79a903b23823431cdb07650a5e4a44


    # someFunction(bool,address[],address,uint256,address)

    # 0   0   0000000000000000000000000000000000000000000000000000000000000000 bool false, uint256 0, address 0x0000000000000000000000000000000000000000, bytes1 0x0

    # 20  32  00000000000000000000000000000000000000000000000000000000000000a0 160 offset массив данных address[]
    # a0  160 0000000000000000000000000000000000000000000000000000000000000002 2 длина
    # c0  192 000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 адрес
    # e0  224 0000000000000000000000000ad5a92a5d79a903b23823431cdb07650a5e4a44 адрес

    # 40  64  0000000000000000000000008bdcdcca87b739f5ca9d0e42a7f0ac55e2a80ff9 адрес
    # 60  96  0000000000000000000000000000000000000000000000000000000067ebaca8 1743498408 uint256 deadline
    # 80  128 0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f адрес

    # """




def decode_abi_2():
    intput_data = '000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000067ecc81400000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000fc3e1fb30d80000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000fc3e1fb30d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b90b2a35c65dbc466b04240097ca756ad20052950000000000000000000000000000000000000000000000000000000000000060000000000000000000000000b90b2a35c65dbc466b04240097ca756ad2005295000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000b90b2a35c65dbc466b04240097ca756ad2005295000000000000000000000000e98655a721eed1cb59738f9f0ba0f6548f9d2c4c000000000000000000000000000000000000000001a66924a590b4d91f4777c70c'
    intput_data_bytes = bytes.fromhex(intput_data)
    first, bytes_array, deadline = decode(['bytes','bytes[]','uint256'], intput_data_bytes)
 
    permit_types = ['address', 'uint160', 'uint256', 'uint256', 'address', 'uint256', 'bytes']
    swap_types =  ['uint256', 'uint256', 'uint256', 'bytes']
    fee_types = ['address', 'address', 'uint256']
    withdraw_types = ['address', 'uint256']


    print()

    for bytes_data in bytes_array:
        try:
            token, amount, deadline, flag, spender, deadline2, sign = decode(permit_types, bytes_data)
            print('Permit')
            print(f'token: {token}')
            print(f'amount: {amount}')
            print(f'deadline: {deadline}')
            print(f'flag: {flag}')
            print(f'spender: {spender}')
            print(f'deadline2: {deadline2}')
            print(f'sign: {sign}')
            print()
            continue
        except:
            pass

        try:
            noname, amount, zero, tokens_and_fee =   decode(swap_types, bytes_data)
            print('Swap')
            print(f'noname: {noname}')
            print(f'amount: {amount}')
            print(f'zero: {zero}')
            print(f'flag: {flag}')
            print(f'tokens_and_fee: {tokens_and_fee.hex()}')
            print()
            continue

        except:
            pass

        try:
            token_fee, fee_collector, fee =  decode(fee_types, bytes_data)
            print('Fee')
            print(f'token_fee: {token_fee}')
            print(f'fee_collector: {fee_collector}')
            print(f'fee: {fee}')
            print()
            continue
        except:
            pass

        try:
            recipient, min_amount_out  =   decode(withdraw_types, bytes_data)
            print('Withdraw')
            print(f'recipient: {recipient}')
            print(f'min_amount_out: {min_amount_out}')
            print()
            continue
        except:
            pass
            
    
    signature = 'someFunction(bytes,bytes[],uint256)'


    sliced = """ head tail
    0   0   0000000000000000000000000000000000000000000000000000000000000060 96 offset 1 аргумент
    60  96  0000000000000000000000000000000000000000000000000000000000000004 4 длина байтов
    80  128 0a00060c00000000000000000000000000000000000000000000000000000000 bytes
    
    20  32  00000000000000000000000000000000000000000000000000000000000000a0 160 offset 2 аргумент
    a0  160 0000000000000000000000000000000000000000000000000000000000000004 4 длина массива
    c0  192 0000000000000000000000000000000000000000000000000000000000000080 128+192=320 offset 1 элемент массива
    e0  224 0000000000000000000000000000000000000000000000000000000000000200 512+192=704 offset 2 элемент массива
    100 256 0000000000000000000000000000000000000000000000000000000000000320 800+192=992 offset 3 элемент массива
    120 288 00000000000000000000000000000000000000000000000000000000000003a0 928+192=1120 offset 4 элемент массива
    
    40  64  0000000000000000000000000000000000000000000000000000000067ebc14e 1743503694 uint256 deadline time() + 30 minutes 3 аргумент

    ['address', 'uint160', 'uint256', 'uint256', 'address', 'uint256', 'bytes']
    140 320 0000000000000000000000000000000000000000000000000000000000000160 352 длина bytes 1 элемента массива
    160 352 0000000000000000000000000a6e7ba5042b38349e437ec6db6214aec7b35676 address token in
    180 384 000000000000000000000000ffffffffffffffffffffffffffffffffffffffff uint160 amount максимально большое число
    1a0 416 0000000000000000000000000000000000000000000000000000000068134722 1746093858 uint256 deadline time + 30 дней
    1c0 448 0000000000000000000000000000000000000000000000000000000000000000 uint256 0 bool false  
    1e0 480 00000000000000000000000066a9893cc07d91d95644aedd05d03f95e1dba8af address uniswap router
    200 512 0000000000000000000000000000000000000000000000000000000067ebc12a 1743503658  uint256 deadline time() + 30 minutes
    220 544 00000000000000000000000000000000000000000000000000000000000000e0 224 offset bytes
    240 576 0000000000000000000000000000000000000000000000000000000000000041 65 длина bytes
    260 608 bbcee90a8e15fdc8ae41ef5e968aa39d0abd5d79bb4d5920b9b94a469bf2dd3a bytes
    280 640 3933d05d72bacdf346d3f43f02c00ae4b4ddd559af6a4fc9697e65d905abbbb9 bytes
    2a0 672 1c00000000000000000000000000000000000000000000000000000000000000 bytes
    
    ['uint256', 'uint256', 'uint256', 'bytes']
    2c0 704 0000000000000000000000000000000000000000000000000000000000000100 256 длина 2 элемент массива
    2e0 736 0000000000000000000000000000000000000000000000000000000000000002 2 uint256 or address
    300 768 00000000000000000000000000000000000000000000000a22e20438ef096f7b amountIn 186981016921696726907 uint256
    320 800 0000000000000000000000000000000000000000000000000000000000000000 uint256 0 bool false
    340 832 00000000000000000000000000000000000000000000000000000000000000a0 160 offset
    360 864 0000000000000000000000000000000000000000000000000000000000000001 1 
    380 896 000000000000000000000000000000000000000000000000000000000000002b 43 длина bytes
    3a0 928 0a6e7ba5042b38349e437ec6db6214aec7b35676000bb8c02aaa39b223fe8d0a bytes tokenin tokenout WETH 
    3c0 960 0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000 bytes 
     
    ['address', 'address', 'uint256]
    3e0 992 0000000000000000000000000000000000000000000000000000000000000060 96 длина 3 элемент массива
    400 1024 000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 WETH
    420 1056 000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c address fee collector
    440 1088 0000000000000000000000000000000000000000000000000000000000000019 25 uint256 fee
    
    ['address', 'uint256']
    460 1120 0000000000000000000000000000000000000000000000000000000000000040 64 длина 4 элемент массива
    480 1152 000000000000000000000000d8fc237cc93e49982493df847fb8686a04dfcdf7 owner sender resipient 
    4a0 1184 0000000000000000000000000000000000000000000000000003e717fa2a2a2a 1098515097463338 uint256 minamountout
    4c0 1216 0c 12 
    """
    
    



if __name__ == '__main__':
    decode_abi_2()
