21""""""

"""
Задание 1 - easy

Напишите самостоятельно функцию
allowance(owner: str, spender: str, token: str, w3: Web3) -> int,
которая принимает:
- owner: str - адрес владельца токена
- spender: str - адрес того, кому разрешено тратить токены
- token: str  - адрес контракта токена
- w3: Web3 - объект w3

функция должна возвращать количество токенов, которое spender может потратить от owner.


"""

# код пишем тут

"""
Задание 2  - medium

Напишите самостоятельно функцию approve(amount: float, spender: str, token: str, pk: str, w3: Web3) -> str,
которая принимает:
- amount: float - количество токенов для разрешения траты
- spender: str - адрес того, кому разрешено тратить токены
- token: str  - адрес контракта токена
- pk: str - приватный ключ
- w3: Web3 - объект w3

Функция должна разрешить spender тратить amount токенов от вашего адреса.

"""
# код пишем тут


"""
Задание 3 - HARD - нужно будет попотеть.

Напишите скрипт, который очищает все выданные апрувы по всем токенам в любой EVM сети.
Как получить список апрувов, которые были выданы?
Можно использовать 2 конечных точки etherscan API:

1. Get a list of 'Normal' Transactions By Address - https://docs.etherscan.io/etherscan-v2/api-endpoints/accounts
Запрос на получение всех транзакций по адресу отправителя.
Делаете запрос из полученных данных можно найти все транзакции с методом approve, у данных
транзакций можно получить to - это адрес токена, а в input (data) - можно извлечь spender.
Например input: 0x095ea7b30000000000000000000000007b3579c8bffe6c8c19ff06de9e54fd1da8cebfb600000000000019ac878c348b192174a2349667d4591dfc51f408a9f3b79347dd
7b3579c8bffe6c8c19ff06de9e54fd1da8cebfb6 - это адрес spender (вспоминайте ABI кодирование поля data в транзакции)
Собрав все адреса spender и адреса токенов, можно сделать запрос к контрактам токенов и получить allowance(owner, spender) 

2. Get Event Logs by Topics - https://docs.etherscan.io/etherscan-v2/api-endpoints/logs
При выполнении транзакции апрува, генерируется событие Approval(address indexed owner, address indexed spender, uint256 value)
в системе логирования блокчейна.
Пример лога: https://etherscan.io/tx/0xdd5a3240fa4bd34cb8475a16b071d48672536b7f5e51b961a23ba025573fbc02#eventlog
В логах есть параметры для будущей фильтрации, которые называются топиками.
Address - это адрес контракта токена
Topics 0 - это хэш функции keccak256 от строки "Approval(address,address,uint256)" 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
Topics 1 - это адрес владельца токена дополненный нулями слева до 64 символов
Topics 2 - это адрес spender дополненный нулями слева до 64 символов
Можно получить все логи событий Approval(address,address,uint256), отфильтрованные
по адресу отправителя транзакции.
Для этого нужно отправить запрос в etherscan API с параметрами:
topic0= 0xХеш функции keccak256 от строки "Approval(address,address,uint256)"
topic0_1= and # указание что будет дополнительный параметр фильтрации
topic1= 0xАдрес владельца токена дополненный нулями слева до 64 символов
!!! поле address в запросе это адрес контракта токена, если вы хотите получить все логи по всем токенам, то
параметр address можно не указывать.
Из полученных данных можно извлечь адреса токенов и адреса spender, кому давали апрувы.
После получения всех адресов токенов и spender, можно сделать запрос к контрактам токенов и получить allowance(owner, spender)

После сбора всех данных, нужно сделать запрос к контрактам токенов кому выданы апрувы и 
отправить транзакцию approve(0, spender, token)


Напишите скрипт, который берет приватные из текстового файла, ищет для каждого адреса все апрувы и отменяет их.
Скрипт должен работать сетях Arbitrum, Optimism и Binance Smart Chain,
скрипт должен удалять апрувы всех ERC20 токенов, которые генерируют событие Approval(address,address,uint256)

"""


# код пишем тут

